cmake_minimum_required(VERSION 3.15)

if(APPLE)
    set(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "Build architectures for macOS")
endif()

project(MLPitchDetector VERSION 1.0.0)

set(CMAKE_CXX_STANDARD 17)

set(JUCE_PATH "/Users/admin/Documents/repos/JUCE")

# Include JUCE
add_subdirectory(${JUCE_PATH} JUCE)

# Conditional formats
if(APPLE)
    set(PLUGIN_FORMATS AU VST3)
elseif(NOT APPLE)
    set(PLUGIN_FORMATS VST3)
endif()

if(MSVC)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDebug")
    add_compile_options(
        $<$<CONFIG:Debug>:/MTd>
        $<$<CONFIG:Release>:/MT>
    )
endif()

# Define user library path for plugin installation (macOS-specific)
if(APPLE)
    set(USER_LIBRARY_DIR "$ENV{HOME}/Library/Audio/Plug-Ins")
endif()

# Plugin setup arguments (common)
set(PLUGIN_ARGS
    PLUGIN_MANUFACTURER_CODE Manu
    PLUGIN_CODE GenD
    FORMATS ${PLUGIN_FORMATS}
    PRODUCT_NAME "${PLUGIN_PRODUCT_NAME}"
    COMPANY_NAME "54v450l4r"
    BUNDLE_ID "com.54v450l4r.MLPitchDetector"
    PLUGIN_IS_A_SYNTH FALSE
    NEEDS_MIDI_INPUT FALSE
    IS_MIDI_EFFECT FALSE
    IS_SYNTH FALSE
    EDITOR_WANTS_KEYBOARD_FOCUS TRUE
    MIDI_INPUT_NAME "MIDI Input"
    MIDI_OUTPUT_NAME "MIDI Output"
)

# Conditional plugin setup arguments
if(APPLE)
    list(APPEND PLUGIN_ARGS
        COPY_PLUGIN_AFTER_BUILD TRUE
        AU_COPY_DIR "${USER_LIBRARY_DIR}/Components"
        VST3_COPY_DIR "${USER_LIBRARY_DIR}/VST3"
        VST3_COPY_DIR_DISABLE_AUTO_COPY TRUE
    )
else()
    list(APPEND PLUGIN_ARGS
        COPY_PLUGIN_AFTER_BUILD FALSE
    )
endif()

# Plugin setup
juce_add_plugin(MLPitchDetector ${PLUGIN_ARGS})

target_compile_definitions(MLPitchDetector
    PRIVATE 
        JUCE_DISABLE_VST2_BUILDING=1
        JUCE_PLUGINHOST_VST3=1
        JUCE_PLUGINHOST_VST=0
    PUBLIC
        JUCE_WEB_BROWSER=0
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0
        JUCE_STRICT_REFCOUNTEDPOINTER=1
)

# Source files
target_sources(MLPitchDetector PRIVATE
    Source/PluginEditor.cpp
    Source/PluginEditor.h
    Source/PluginProcessor.cpp
    Source/PluginProcessor.h
    Source/PitchDetector.cpp
    Source/PitchDetector.h
)

# Binary data
juce_add_binary_data(BinaryResources SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/Resources/crepe_medium.onnx
    ${CMAKE_CURRENT_SOURCE_DIR}/Resources/background.png
)

set(ONNXRUNTIME_DIR "/Users/admin/Documents/repos/onnxruntime-static")

target_include_directories(MLPitchDetector PRIVATE ${ONNXRUNTIME_DIR}/include)

if(APPLE)
    target_link_libraries(CounterTune PRIVATE "${ONNXRUNTIME_DIR}/lib/libonnxruntime.a")
elseif(NOT APPLE)
    target_link_libraries(CounterTune PRIVATE "${ONNXRUNTIME_DIR}/lib/onnxruntime.lib")
endif()

# Link everything
target_link_libraries(MLPitchDetector PRIVATE 
    BinaryResources
    juce::juce_audio_basics
    juce::juce_audio_devices
    juce::juce_audio_formats
    juce::juce_audio_plugin_client
    juce::juce_audio_processors
    juce::juce_audio_utils
    juce::juce_core
    juce::juce_data_structures
    juce::juce_dsp
    juce::juce_events
    juce::juce_graphics
    juce::juce_gui_basics
    juce::juce_gui_extra
    juce::juce_osc
)

juce_generate_juce_header(MLPitchDetector)
